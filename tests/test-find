: # simple find
---------------
: write test.c
int var;
: ironout find test.c 6
test.c 4 7
: # multiple occurrences
------------------------
: write test.c
int var;
int f() {
	return var;
}
: ironout find test.c 6
test.c 4 7
test.c 27 30
: # finding in function scopes
------------------------------
: write test.c
int f() {
	int var = 1;
	return var;
}
int g() {
	int var = 1;
	return var;
}
: ironout find test.c 16
test.c 15 18
test.c 32 35
: # finding enum types
----------------------
: write test.c
int f() {
	enum values {
		VALUE1,
		VALUE2 = 5
	} val1 = VALUE1;
	enum values val2 = VALUE2;
}
int g() {
	int value1, value2, values, val1;
}
: ironout find test.c 20
test.c 16 22
test.c 72 78
: ironout find test.c 60
test.c 27 33
test.c 58 64
: # not considering declared enum
---------------------------------
: write test.c
enum values {
	VALUE1,
	VALUE2 = 5
};
int f() {
	enum values;
	enum values val2 = VALUE2;
}
int g() {
	enum values val1 = VALUE1;
}
: ironout find test.c 56
test.c 5 11
test.c 54 60
test.c 68 74
test.c 108 114
: # test struct types
---------------------
: write test.c
int f() {
	struct myobj {
		int field1;
		int field2;
	} obj1;
	struct myobj obj2;
}
int g() {
	int myobj, obj1, obj2;
}
: ironout find test.c 20
test.c 18 23
test.c 71 76
: ironout find test.c 58
test.c 57 61
: # test global names
---------------------
: write test.c
int var = 0;
int f() {
	{
		int var = 1;
		var++;
	}
	var++;
}
: ironout find test.c 43
test.c 32 35
test.c 43 46
: ironout find test.c 54
test.c 4 7
test.c 54 57
: # test global functions
-------------------------
: write test.c
void g() {}
int f() {
	{
		int g;
		g++;
	}
	g();
}
: ironout find test.c 31
test.c 31 32
test.c 36 37
: ironout find test.c 45
test.c 5 6
test.c 45 46
: # test variable usage when initializing
-----------------------------------------
: write test.c
int var;
int f() {
	int i = var;
}
: ironout find test.c 4
test.c 4 7
test.c 28 31
